1. 변수와 자료형
  : 자바스크립트는 다른 언어들과 달리 자료형이 고정되어 있지 않은 동적타입 언어이다. 
    따라서 변수를 선언할 때 별도의 자료형을 명시하지 않아도 된다.
  
  1) 자료형
   내부적으로는 Primitive(기본형)과 Object(객체형)이 있으며 각각 다음과 같다.
 
   Primitive
    - Boolean : true, false
    - null : 빈 값을 표현
    - undefined : 값을 할당하지 않은 변수가 가지는 값
    - Number : 숫자형으로 정수와 부동 소수점, 무한대 및 NaN(숫자가 아님) 등
    - String : 문자열

   Object
    - Reference 타입
    - 클래스 뿐만 아니라 배열과 함수, 사용자 정의 클래스도 모두 Object
    - JSON(Java Script Object Notation)의 기본 구조

  2) 변수 선언
   
   - 변수이름은 대소문자를 구별
   - 여러 변수를 한번에 선언할 수 있음
   - 지역변수와 전역변수가 있음
   - 기본적으로 소문자로 시작되는 Carnel Case를 사용

	var firstNumber; 
	firstNumber = 10;
  
	앞에 var, let, const 셋 중 하나는 무조건 써야함!!! 아무것도 쓰지 않으면 전역변	수가 됨!!!

   - var, let, const
    : ES6 이전에는 var만 존재했으며 function-scopred로 인해 다른 언어들과 다른 문제        가 있었음
    : var는 지역변수 개념으로 함수 범위에서 유효함
    : var를 선언하지 않으면 자동으로 전역변수가 됨
    : let과 const는 ES6에서 등장한 block-scoped 변수 선언
    : let은 값의 재할당이 가능하고 const는 불가능(immutable)
    : const로 선언된 배열이나 객체의 경우 새로운 객체로 재할당되는 것은 안되고, 배열        값의 변경/추가, 객체의 필드 변경 등은 가능

   ex)
	var를 이용한 변수선언 예

	var foo = 'foo1';
	console.log(foo);       /// foo1 출력
	if(true){
		var foo = 'foo2';        -->전역변수가 되어 위에로 들어감
		console.log(foo);        ///foo2 출력
	}
	console.log(foo);      ///foo3 출력

	let과 const 이용한 변수선언 예
	
	let foo = 'foo1';
	const bar = 'bar1';
	console.log(foo);         /// foo1 출력
	if(true){
		let foo = 'foo2';        -->여기서 let으로 선언한 foo2는 지역변수가 됨
		console.log(foo)        /// foo2 출력
		console.log(bar)        /// bar1 출력
	}
	console.log(foo);       /// foo1 출력
	bar='bar2';        /// error(const 상수이므로 값 변경 불가)

   - hoisting
    : 호이스팅은 끌어올리기라는 사전적 의미를 가지고 있다. 자바스크립트에서 모든 변수        선언은 호이스트 되고 함수의 경우 선언형식은 호이스팅 되며 변수에 할당된 형태는        호이스팅 되지 않는다.
    
    * 자바스크립트 변수에 있어 변수의 선언이 위치와 상관없이 최상위 레벨로 끌어올려         진다고 이해할 수 있다.

	if (true){
		console.log(foo);    /// undefined
		var foo = 'foo1';
		console.log(foo);   /// foo1 출력
	}

     : 일반적인 언어인 경우 foo 변수는 첫번째 출력문에서 선언되기 전 상태로 에러가 발         생해야 함
     : 자바스크립트는 var foo가 호이스트 되어 변수는 선언되고 값이 할당되지 않은 상태         가 됨

	var myVar;
	function myVar(){
		...
	}
	console.log(typeof myVar);   ///function 출력

     : 위 예제에서는 myVar 라는 변수를 먼저 선언한 상태에서 동일 이름의 함수를 정의
     : 함수 선언이 호이스팅 되어 myVar 변수에 할당

    - String 변수
     : 일반적인 프로그래밍언어들은 문자열을 표현할 때 큰따옴표(" ")를 사용하는데 반해         자바스크립트는 " ", ' '를 모두 사용할 수 있다

	var string;
	string = "java script"    // 혹은 'java script'

2. 출력문
 1) HTML 문서에 출력(이 방법 권장 X)

	<script>
	document.write(5+6); ->document라는 객체가 제공하는 write 함수 이용
	</script>

	<body>
	<h2>Hello world</h2>
	</body>

 2) HTML 문서의 특정부분에 출력(HTML소스 유지하고 부분적으로 변경, HTML 문서 동적      으로 핸들링 하는 방법)

	<script>
	document.getElementById("result").innerHTML = 5+6;
	</script>

	<body>
	<h2>Hellow world</h2>
	<div id="result"> ->위에 값이 result로 들어감
	</div>
	</body>
	
 3) Alert 창을 이용한 출력

	<script>
	alert(5+6);
	</script>

 4) 브라우저 콘솔창을 이용한 출력
  : 자바스크립트 코드에서 진행상황을 출력하거나 개발을 위해 참고하기 위한 값들을 출력      하기 위한 용도
  : 보통 프로그램언어의 출력문과 가장 비슷한 경우. conslole.log()를 사용하며 결과 확인      은 웹브라우저의 콘솔창에 나타남

	<script>
	console.log(5+6);
	</script>

3. 연산자와 제어문
 1) 연산자
  == 값이 같은지 비교
  === 값과 타입이 모두 같은지 비교
  != 같지 않음
  !== 값이나 타입이 같지 않음
  >, <, >=, <= 동일
  ? 3항연산 (조건)? 참인 경우 수행 : 거짓인 경우 수행
  && and연산자
  || or연산자
  ! not 연산자

 2) 조건문
  if, else if

	var score=85;
	if(score>=90)
		console.log(‘A’);
	else if(score >=80)
		console.log(‘B’);

  switch

	var level = ‘B’;
	switch(level){
		case ‘A’ :
			console,log(‘vip등급’);
			break;
		default :
			console.log(‘등급없음’);
			break;
	}

 3) 반복문
  for, while, forEach, for-in, for-of-for

  for

	const colors = [‘red’, ‘blue’, ‘green’];
	for(let i=0; i<colors.length; I++){
		console.log(colors[i]);
	}

  while

	const colors = [‘red’, ‘blue’, ‘green’];
	var i=0;
	while(colors[i] != null){
		console.log(colors[i]);
		i++;
	}

forEach : ES5에서 사용가능하게 된 문법으로 배열의 모든 원소에 대해 특정 코드블럭을             수행할 수 있는 방법이다. -> 객체지향 방법

	const colors = [‘red’, ‘blue’, ‘green’];
	colors.forEach(function(value){
		console.log(value);
	}
ES6에서는 arrow 연산자를 통해 다음과 같이 간결하게 사용할 수 있다.
	const colors = [‘red’, ‘blue’, ‘green’];
	colors.forEach(value => console.log(value));  for-in, for-of : 최근 다른 언어들에 도입된 –in 형태의 구문이다. 다만 –in의 경우 배열원소의 값에 접근할 수 없고 키 혹은 인덱스만 접근이 가능하므로 다른 언어에서의 –in과 같은 형태로 사용하려면 for-of를 사용해야 한다.

	const colors = [‘red’, ‘blue’, ‘green’];
	for(var index in colors){
		console.log(colors[index]);
	}
	for(var value of colors){
		console.log(value);
	}

  for-in
   - 객체의 모든 열거 가능한 속성에 대해 반복.
   - 즉, 배열 뿐만 아니라 일반적인 객체의 속성들을 모두 반복할 때도 사용 가능
   - 모든 객체의 key(배열의 경우 인덱스)에 접근할 수 있지만 value에 접근할 수는 없음

  for-of
   - 반복 가능한 객체의 값을 순환. 배열 이외 문자열 데이터 처리도 가능
   - ES6에 새로 추가된 MAP, SET에도 적용 가능
   - Object를 대상으로 하지 않으며 객체의 속성을 순회하려면 for-in을 사용
   - Object를 사용할 경우 Object.keys()로 키 값을 구해서 순회하면서 출력할 수 있음
